<import
  name="input-method"
  src="../../third-party/Vela_input_method/components/InputMethod/InputMethod.ux"
></import>
<template>
  <div class="page {{pageClass}}" id="page" @swipe="pageSwipe">
    <div class="topbar">
      <div class="topbar-btn" @click="back()">
        <image src="/common/icon/back.png" class="icon" />
      </div>
      <text class="title">书源管理</text>
      <div class="topbar-btn" @click="toggleMenu">
        <image src="/common/icon/menu.png" class="icon" />
      </div>
    </div>
    <div class="body">
      <scroll class="body-container" id="body" style="height: {{bodyHeight}}px" scroll-y="true" bounces="true">
        <block if="{{list.length > 0}}" for="item in list">
          <div class="card" @click="toggleSourceMenu(item)">
            <div class="col grow">
              <text class="card-btn-text ma-0">{{ item.bookSourceName }}</text>
            </div>
            <image src="/common/icon/check{{ item.enabled ? '-active' : ''}}.png" class="icon"
              @click="setValue(item, 'enabled', !item.enabled)" />
          </div>
        </block>
        <div else class="body-holder">
          <text>这里……</text>
          <text>空空如也呢~</text>
        </div>
      </scroll>
      <div class="menu pa-md {{ menu }}">
        <div class="card" @click="onlineImport">
          <image src="/common/icon/web.png" class="icon" />
          <text class="card-btn-text center">网络导入</text>
        </div>
        <div class="card" @click="wait">
          <image src="/common/icon/group.png" class="icon" />
          <text class="card-btn-text center">分组管理</text>
        </div>
        <div class="card" @click="clear">
          <image src="/common/icon/trash.png" class="icon" />
          <text class="card-btn-text center">清空书源</text>
        </div>
        <div class="card" @click="wait">
          <image src="/common/icon/help.png" class="icon" />
          <text class="card-btn-text center">帮助</text>
        </div>
      </div>
      <div class="menu {{ sourceMenu }}">
        <scroll class="body-container" scroll-y="true" bounces="true">
          <div class="card" @click="setValue(activedItem, 'enabled', !activedItem.enabled)">
            <image src="/common/icon/check{{ activedItem.enabled ? '-active' : ''}}.png" class="icon" />
            <text class="card-btn-text center">
              {{ activedItem.enabled ? "禁用" : "启用" }}
            </text>
          </div>
          <div class="card" @click="moveUp">
            <image src="/common/icon/up.png" class="icon" />
            <text class="card-btn-text center">置顶</text>
          </div>
          <div class="card" @click="moveDown">
            <image src="/common/icon/down.png" class="icon" />
            <text class="card-btn-text center">置底</text>
          </div>
          <div if="{{activedItem.hasLogin}}" class="card" @click="login">
            <image src="/common/icon/password.png" class="icon" />
            <text class="card-btn-text center">登录</text>
          </div>
          <div class="card" @click="wait">
            <image src="/common/icon/search.png" class="icon" />
            <text class="card-btn-text center">搜索</text>
          </div>
          <div class="card" @click="remove">
            <image src="/common/icon/trash.png" class="icon" />
            <text class="card-btn-text center">删除</text>
          </div>
          <div if="{{activedItem.hasExplore}}" class="card"
            @click="setValue(activedItem, 'enabledExplore', !activedItem.enabledExplore)">
            <image src="/common/icon/check{{ activedItem.enabledExplore ? '-active' : ''}}.png" class="icon" />
            <text class="card-btn-text center">
              {{ activedItem.enabledExplore ? "禁用" : "启用" }}发现
            </text>
          </div>
        </scroll>
      </div>
      <div class="menu pa-md justify-start {{importMenu}}">
        <div class="col">
          <div class="card {{ activedInput==='sourceUrl' ? 'active' : 'inactive'}}" @click="activeInput('sourceUrl')">
            <text class="card-btn-text">
              {{ sourceUrl === "" ? "请输入9位传输码/源仓库id" : sourceUrl }}
            </text>
          </div>
          <div class="card justify-center" @click="submitUrl">
            <image src="/common/icon/submit.png" class="icon" />
            <text class="card-btn-text">提交</text>
          </div>
        </div>
      </div>
      <div class="menu pa-md justify-start {{loginMenu}}">
        <div class="col">
          <block for="(index, item) in activedItem.loginUi">
            <div if="{{item.type === 'text'}}"
              class="card {{ activedInput===`activedItem.loginUi.${index}.value` ? 'active' : 'inactive'}}"
              @click="activeInput(`activedItem.loginUi.${index}.value`)">
              <text class="card-btn-text">
                {{ item.value === "" ? item.name : item.value }}
              </text>
            </div>
            <div elif="{{item.type === 'password'}}"
              class="card {{ activedInput===`activedItem.loginUi.${index}.value` ? 'active' : 'inactive'}}"
              @click="activeInput(`activedItem.loginUi.${index}.value`)">
              <text class="card-btn-text">
                {{ item.value === "" ? item.name : item.value.replace(/./g, "·") }}
              </text>
            </div>
          </block>
          <div class="card justify-center" @click="submitLogin">
            <image src="/common/icon/submit.png" class="icon" />
            <text class="card-btn-text">提交</text>
          </div>
        </div>
      </div>
      <div class="menu input-menu pa-md {{keyboardMenu}}">
        <div class="w-100 h-100" @click="toggleKeyboardMenu"></div>
        <input-method hide="{{false}}" screentype="{{'rect'}}" @delete="delete" @complete="complete"></input-method>
      </div>
    </div>
    <div class="cover-animation-helper {{coverAnimation}}"></div>
  </div>
</template>

<script>
const {template, router, helper, source, fetch} = global

export default {
  ...template,
  private: {
    ...template.private,
    list: source.mapForUi(),
    menu: "",
    sourceMenu: "",
    importMenu: "",
    loginMenu: "",
    keyboardMenu: "",
    activedItem: undefined,
    activedInput: undefined,
    sourceUrl: "",
    importing: false,
    logining: false,
  },
  ...router,
  activeInput(name) {
    this.activedInput = name
    if (!!this.activedInput) this.toggleKeyboardMenu()
  },
  onBack() {
    if (this.keyboardMenu === "animation-in") {
      this.toggleKeyboardMenu()
      return true
    }
    if (this.loginMenu === "animation-in") {
      this.toggleLoginMenu()
      return true
    }
    if (this.importMenu === "animation-in") {
      this.toggleImportMenu()
      return true
    }
    if (this.sourceMenu === "animation-in") {
      this.toggleSourceMenu(this.activedItem)
      return true
    }
    if (this.menu === "animation-in") {
      this.toggleMenu()
      return true
    }
    source.save()
  },
  setValue(item, key, value, evt) {
    item[key] = value
    source.syncFromUi(this.list)
    evt.stopPropagation()
  },
  toggleMenu() {
    if (this.keyboardMenu === "animation-in") {
      this.toggleKeyboardMenu()
      return
    }
    if (this.loginMenu === "animation-in") {
      this.toggleLoginMenu()
      return
    }
    if (this.importMenu === "animation-in") {
      this.toggleImportMenu()
      return
    }
    if (this.sourceMenu === "animation-in") {
      this.toggleSourceMenu(this.activedItem)
    }
    if (this.menu === "animation-in") {
      this.menu = "animation-out-back"
    } else {
      this.menu = "animation-in"
    }
  },
  toggleSourceMenu(item) {
    this.activedItem = item
    if (this.sourceMenu === "animation-in") {
      this.sourceMenu = "animation-out-back"
    } else {
      this.sourceMenu = "animation-in"
    }
  },
  toggleImportMenu() {
    if (this.importMenu === "animation-in") {
      this.importMenu = "animation-out-back"
    } else {
      this.importMenu = "animation-in"
      this.activeInput("sourceUrl")
    }
  },
  toggleLoginMenu() {
    if (this.loginMenu === "animation-in") {
      this.loginMenu = "animation-out-back"
    } else {
      this.loginMenu = "animation-in"
    }
  },
  toggleKeyboardMenu() {
    if (this.keyboardMenu === "animation-in") {
      this.keyboardMenu = "animation-out-back"
      this.activedInput = ""
    } else {
      this.keyboardMenu = "animation-in"
    }
  },
  onlineImport() {
    this.toggleImportMenu()
  },
  complete(evt) {
    helper.setPropertyValue(
      this,
      this.activedInput,
      helper.getPropertyValue(this, this.activedInput) + evt.detail.content
    )
  },
  delete() {
    helper.setPropertyValue(
      this,
      this.activedInput,
      helper.getPropertyValue(this, this.activedInput).slice(0, -1)
    )
  },
  submitUrl() {
    if (this.importing) {
      this.toast("导入进行中，请勿重复操作")
      return
    }
    this.importing = true
    this.toast("正在导入，请稍候")
    let url
    if (!isNaN(parseFloat(this.sourceUrl)) && isFinite(this.sourceUrl)) {
      url = `https://www.yckceo.com/yuedu/shuyuan/json/id/${this.sourceUrl}`
    } else if (this.sourceUrl.length === 9) {
      url = `https://t.doruo.cn/${this.sourceUrl}`
    } else {
      this.toast("请输入正确的9位传输码/源仓库id")
      return
    }

    fetch(url)
      .then((res) => {
        if (typeof res.data === "string") {
          try {
            res.data = JSON.parse(res.data)
          } catch (e) {
            throw "JSON解析失败，请检查链接是否正确"
          }
        }
        if (res.data.length > 0) {
          res.data.forEach((item) => {
            if (!source.add(item)) {
              this.toast("导入失败，已存在重复书源")
            }
          })
          this.list = source.mapForUi()

          this.back()
          this.back()
        }
      })
      .catch((err) => {
        this.toast(err)
      })
      .finally(() => {
        this.importing = false
      })
  },
  submitLogin() {
    if (this.activedItem) {
      const loginInfoMap = new Map()
      this.activedItem.loginUi.forEach((item) => {
        loginInfoMap.set(item.name, item.value)
      })
      source
        .getSource(this.activedItem.bookSourceUrl)
        .login(loginInfoMap)
        .then((res) => {
          if (res.success) {
            this.toast("登录成功")
            this.back()
          } else {
            this.toast(res.msg)
          }
        })
    }
  },
  moveUp() {
    if (this.activedItem) {
      source.moveUp(this.activedItem)
      this.list = source.mapForUi()
      this.back()
    }
  },
  moveDown() {
    if (this.activedItem) {
      source.moveDown(this.activedItem)
      this.list = source.mapForUi()
      this.back()
    }
  },
  login() {
    if (this.activedItem) {
      if (!this.activedItem.loginUi) this.toast("未找到登录页面，暂不支持 WebView 登录")
      this.toggleLoginMenu()
    }
  },
  remove() {
    if (this.activedItem) {
      source.remove(this.activedItem)
      this.list = source.mapForUi()
      this.back()
    }
  },
  clear() {
    source.clear()
    this.list = source.mapForUi()
    this.back()
  }
}
</script>

<style>
@import url(../../common/css/page.css);

.input-menu {
  padding: 0;
  justify-content: flex-start;
  background-color: rgba(0, 0, 0, 0);
}

.inactive {
  border: 3px solid rgba(255, 255, 255, 0.2);
}

.active {
  border: 3px solid white;
}
</style>
